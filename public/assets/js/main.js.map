{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\nconst FAVORITES_KEY = 'favorites';\nlet showResultsContainer = document.body.querySelector('#show-results');\nlet showInputElem = document.body.querySelector('#show-input');\nlet searchShowButton = document.body.querySelector('#search-show');\nlet errorBlock = document.body.querySelector('#error');\n\nfunction getLocalStorageFavorites() {\n    // Obtenemos array de IDs de favoritos o array vacío por defecto si no había nada en localStorage\n    let favorites = localStorage.getItem(FAVORITES_KEY) || '[]';\n\n    // Importante: los arrays vienen como strings, hay que convertirlos a arrays normales con JSON.parse\n    return JSON.parse(favorites);\n}\n\nfunction addFavorite(showId) {\n    // Obtenemos lista de favoritos (array)\n    let favorites = getLocalStorageFavorites();\n    // Añadimos ID de serie a lista de favoritos\n    favorites.push(showId);\n\n    // Actualizamos localStorage, sin olvidar convertir el array a un string con JSON.stringify\n    localStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites));\n}\n\nfunction removeFavorite(showId) {\n    // Obtenemos lista de favoritos como array\n    let favorites = getLocalStorageFavorites();\n\n    // Buscamos índice (posición) de array de favoritos del ID de la serie a quitar de lista de favoritos\n    let indexToDelete = favorites.indexOf(showId);\n\n    // Si el índice encontrado es distinto de -1, significa que el ID de serie a borrar estaba en la lista\n    if (indexToDelete !== -1) {\n        // Borramos elemento en la posición de ID de serie a borrar\n        favorites.splice(indexToDelete, 1);\n    }\n\n    // Actualizamos lista de favoritos en localStorage, sin olvidar de convertir array a string con JSON.stringify\n    localStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites));\n}\n\nfunction hasFavorite(showId) {\n    // Obtenemos lista de favoritos como array\n    let favorites = getLocalStorageFavorites();\n\n    // Comprobamos si ID de serie existe en array.\n    // Importante, los IDs de serie se guardan como strings en el array, pero showId es un número\n    // Por seguridad, convertimos showId en String para que la comparación sea entre strings\n    // si fuera entre string y número, no funcionaría\n    if (favorites.indexOf(showId.toString()) !== -1) {\n        return true; // Indicamos que existe\n    }\n    return false;\n}\n\nfunction toggleFavorite(event) {\n    // event.currentTarget nos dará el <li> que se ha seleccionado\n    let toggledResultItem = event.currentTarget;\n    toggledResultItem.classList.toggle('show-result-item-active');\n\n    // El elemento <li> debería tener un atributo data-showId: lo obtenemos así\n    let showId = toggledResultItem.dataset.showId;\n\n    // Si hay showId\n    if (showId) {\n        if (toggledResultItem.classList.contains('show-result-item-active')) {\n            // Si la clase de favorito está aplicada al <li>, añadimos la serie como favorita a la lista\n            addFavorite(showId);\n        } else {\n            // Si la clase de favorito NO está aplicada al <li>, quitamos la serie de la lista de favoritos\n            removeFavorite(showId);\n        }\n    }\n}\n\nfunction searchShow() {\n    // Obtenemos el valor introducido en el input del buscador de series\n    let query = showInputElem.value;\n\n    showResultsContainer.innerHTML = '';\n\n    // Realizar la petición a la API para el valor que hemos introducido\n    fetch(`https://api.tvmaze.com/search/shows?q=${query}`)\n        .then(response => response.json())\n        .then(response => {            \n            // Mostrar un texto informativo si no hay resultados\n            if (response.length === 0) {\n                errorBlock.innerText = 'No se han encontrado resultados para esta búsqueda';\n            } else {\n                // Resetear el texto de error en caso contrario, para evitar confusiones si hay resultados\n                errorBlock.innerText = '';\n            }\n\n            // La estructura de los datos:\n            // 1. Es un array de objetos\n            // 2. Cada objeto tiene dos campos: 'score' y 'show' ('show' es un objeto con los campos de interés: nombre, géneros de la serie, imagen, sinopsis...).\n\n            // Iterar por cada elemento del array de resultados\n            for (const showData of response) {\n                // Nos interesa el campo 'show' de cada objeto del array\n                let show = showData.show;\n\n                // De momento nos interesan dos cosas: nombre de la serie e imagen\n                let showName = show.name;\n\n                // El campo 'image' tiene a su vez dos campos: 'medium' y 'original'. Creo que la 'original' contiene una imagen muy grande, y la 'medium' tendría una imagen de un tamaño más asequible para meter en nuestro listado.\n\n                let showImage;\n                if (show.image && show.image.medium) {\n                    showImage = show.image.medium;\n                } else {\n                    showImage = `https://via.placeholder.com/210x295/cccccc/666666/?text=TV`;\n                }\n\n                // Creamos un elemento li para cada resultado de serie\n                let showResultItem = document.createElement('li');\n                showResultItem.className = 'show-result-item';\n\n                // Si existe la serie en la lista de favoritos del local storage, añadimos la clase de favorito al <li>\n                if (hasFavorite(show.id)) {\n                    showResultItem.classList.add('show-result-item-active');\n                }\n                \n                // Añadimos el id de serie como data-showId al <li>, para usarlo en las funciones de localStorage\n                showResultItem.dataset.showId = show.id;\n\n                // Cada elemento li tendrá dos hijos: título de la serie, y su imagen asociada\n\n                // Creamos elemento de imagen\n                let showImageElem = document.createElement('img');\n                showImageElem.src = showImage;\n                showResultItem.appendChild(showImageElem);\n\n                // Creamos elemento de título\n                let showTitleElem = document.createElement('h2');\n                let showTitleText = document.createTextNode(showName);\n                showTitleElem.appendChild(showTitleText);\n                showResultItem.appendChild(showTitleElem);\n\n                // Añadimos evento al elemento <li> para que se marque como destacado\n                showResultItem.addEventListener('click', toggleFavorite);\n            \n                // Finalmente, añadimos elemento <li> a listado\n                showResultsContainer.appendChild(showResultItem);\n            }\n        })\n}\n\nsearchShowButton.addEventListener('click', searchShow);\n"]}